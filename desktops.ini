[Global]
    # 0 = B/W, 1 = 16 Colors, 2 = 255 Colors, 3 = RGB-Colors
    ColorModel = 2
    [.Size]
        # The Area-Definitions Size (Semi-Vectorial)
        Width = 80
        Height = 24
    [.Definitions]
        [..Frames]
            Count = 3
            [...1]
                # Just "&" = ANSI/DECT-Symbols
                # "" = Transparent 
                TopLeftEdge = "&"
                TopRightEdge = "&"
                BottomLeftEdge = "&"
                BottomRightEdge = "&"
                TopLine = "&"
                BottomLine = "&"
                LeftLine = "&"
                RightLine = "&"
            [...2]
                TopLeftEdge = "/"
                TopRightEdge = "\"
                BottomLeftEdge = "\"
                BottomRightEdge = "/"
                TopLine = "-"
                BottomLine = "-"
                LeftLine = "|"
                RightLine = "|"
            [...3]
                TopLeftEdge = "+"
                TopRightEdge = "+"
                BottomLeftEdge = "+"
                BottomRightEdge = "+"
                TopLine = "-"
                BottomLine = "-"
                LeftLine = "|"
                RightLine = "|"
        [..Colors]
            Count = 1
            [...1]
                ForeGround = 0
                BackGround = 1
                # In Area-Definitions it's the Background Color
                # of the Inner Area (where is no frame)
                UnderLine = 1
        [..FixedAreas]
            Count = 1
            [...1]            
                [....Top]
                    CaptionText = "FixedTop"
                    CaptionColorID = 1
                    
                    # 0 = don't, 1 = Left, 2 = Center, 3 = Right
                    CaptionLocation = 0

                    # Height = 0 = Disabled
                    Height = 1            
                    
                    # Maximum Height if TerminalWidth < [Global.Size]
                    SmallHeight = 3
                    
                    # 0 = None, 1 = Top, 2 = Bottom, 4 = Left, 8 = Right
                    FrameLines = 15
                    
                    # 0 = None, 1 = TopLeft, 2 = TopRight, 4 = BottomLeft, 8 = BottomRight
                    FrameEdges = 15

                    FrameID = 1
                    FrameColorID = 1

                    # 0 = Touch Left Area
                    # 1 = Cover Frame Of Left Area
                    # 2 = Full Terminal Width
                    Left = 0

                    # 0 = Touch Right Area
                    # 1 = Cover Frame Of Right Area
                    # 2 = Full Terminal Width
                    Right = 1
                [....Bottom]    
                    Height = 1
                    SmallHeight = 3
                    FrameLines = 15
                    FrameID = 1
                    ColorID = 1
                    Left = 1
                    Right = 0
                [....Left]    
                    #Width = 0 = Disabled
                    Width = 15
                    FrameLines = 15
                    FrameID = 1
                    ColorID = 1
                    
                    # 0 = Touch Top Area
                    # 1 = Cover Frame Of Top Area
                    # 2 = Full Terminal Height
                    Top = 0

                    # 0 = Touch Bottom Area
                    # 1 = Cover Frame Of Bottom Area
                    # 2 = Full Terminal Height
                    Bottom = 0
                [....Right]    
                    Width = 10
                    FrameLines = 15
                    FrameID = 1
                    ColorID = 1
                    Top = 0
                    Bottom = 0
[Desktops]
    Count = 1
    [..1]
        Caption = "MainDesk Test Application"
        [...FixedAreas]
            Count = 1
            Area01 = 1
            Area02 = 0
            Area03 = 0
            Area04 = 0
        [...FlexAreas]
            Count = 3
            [....1]
                Top = 4
                Left = 18
                Width = 1
                Height = 1
                FrameLines = 15
                FrameID = 1
                ColorID = 1
            [....2]
                Top = 1
                Left = 1
                Width = 1
                Height = 1
                FrameLines = 15
                FrameID = 1
                ColorID = 1
            [....3]
                Top = 1
                Left = 1
                Width = 1
                Height = 1
                FrameLines = 15
                FrameID = 1
                ColorID = 1

##12345678901234567890123456789012345678901234567890123456789012345678901234567890
#1*---------------**-------------------------------------------------**----------*
#2|               ||                                                 ||          |
#3|               |*-------------------------------------------------*|          |
#4|               |#-------------------##----------------------------#|          |
#5|               ||                   ||                            ||          |
#6|               ||                   ||                            ||          |
#7|               ||                   ||                            ||          |
#8|               |#-------------------#|                            ||          |
#9|               |#-------------------#|                            ||          |
#0|               ||                   ||                            ||          |
#1|               ||                   |#----------------------------#|          |
#2|               || . . . . . . . . . +-----------------------------#|          |
#3|               ||                                                 ||          |
#4|               ||                                                 ||          |
#5|               ||                                                 ||          |
#6|               ||                                                 ||          |
#7|               |#---------------+-----------------+---------------#|          |
#8|               |                |                 |                |          |
#9|               |                |                 |                |          |
#0|               |                |                 |                |          |
#1*---------------+                |                 |                |          |
#2*------------------------------------------------------------------*|          |
#3|                                                                  ||          |
#4*------------------------------------------------------------------**----------*



#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define BUFFER_SIZE 256

char* get_value_from_location(const char* filename, const char* location) {
  char buffer[BUFFER_SIZE];
  char* value = NULL;

  FILE* file = fopen(filename, "r");
  if (file == NULL) {
    fprintf(stderr, "Error: unable to open file %s\n", filename);
    return NULL;
  }

  char* location_copy = strdup(location);
  char* current_level = strtok(location_copy, ".");

  int location_found = 0;
  while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
    // Check for comments or remarks
    char* comment_ptr = strchr(buffer, '#');
    if (comment_ptr != NULL) {
      *comment_ptr = '\0';
    }
    comment_ptr = strchr(buffer, ';');
    if (comment_ptr != NULL) {
      *comment_ptr = '\0';
    }

    // Trim leading and trailing white space from the buffer
    char* start_ptr = buffer;
    while (*start_ptr == ' ' || *start_ptr == '\t') {
      start_ptr++;
    }
    char* end_ptr = buffer + strlen(buffer) - 1;
    while (*end_ptr == ' ' || *end_ptr == '\t' || *end_ptr == '\n') {
      end_ptr--;
    }
    *(end_ptr + 1) = '\0';

    char current_level_with_brackets[BUFFER_SIZE];
    snprintf(current_level_with_brackets, BUFFER_SIZE, "[%s]", current_level);
    if (strncmp(start_ptr, current_level_with_brackets, strlen(current_level_with_brackets)) == 0) {
      current_level = strtok(NULL, ".");
      if (current_level == NULL) {
        location_found = 1;
        break;
      }
    }
  }
  fclose(file);
  free(location_copy);

if (location_found) {
    // Extract the value from the buffer
    char* equal_sign_ptr = strchr(buffer, '=');
    if (equal_sign_ptr != NULL) {
      value = (char*) malloc(strlen(equal_sign_ptr));
      strcpy(value, equal_sign_ptr + 1);

      // Trim leading and trailing white space
      char* start_ptr = value;
      while (*start_ptr == ' ' || *start_ptr == '\t') {
        start_ptr++;
      }
      char* end_ptr = value + strlen(value) - 1;
      while (*end_ptr == ' ' || *end_ptr == '\t' || *end_ptr == '\n') {
        end_ptr--;
      }
      *(end_ptr + 1) = '\0';
    }
  }



  #include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function prototype
void print_lines(const char* filename);

int main(int argc, char** argv) {
  // Check for correct number of arguments
  if (argc != 2) {
    fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
    return 1;
  }

  // Call the function to print the lines from the file
  print_lines(argv[1]);

  return 0;
}

void print_lines(const char* filename) {
  // Open the file for reading
  FILE* file = fopen(filename, "r");
  if (file == NULL) {
    perror("Error opening file");
    return;
  }

  // Allocate a buffer for reading the lines
  const size_t buffer_size = 1024;
  char* buffer = malloc(buffer_size);
  if (buffer == NULL) {
    fprintf(stderr, "Error allocating buffer\n");
    fclose(file);
    return;
  }

  // Read the lines from the file, one by one
  while (fgets(buffer, buffer_size, file) != NULL) {
    // Store the length of the string in a variable
    size_t length = strlen(buffer);

    // Print the line, character by character
    for (size_t i = 0; i < length; i++) {
      // Print the byte code of the character
      printf("%d", (int)buffer[i]);

      // Check if the character is encoded using multiple bytes in UTF-8
      if ((buffer[i] & 0xE0) == 0xC0) {
        // Two-byte character
        printf(",%d", (int)buffer[i + 1]);
        i++;
      } else if ((buffer[i] & 0xF0) == 0xE0) {
        // Three-byte character
        printf(",%d,%d", (int)buffer[i + 1], (int)buffer[i + 2]);
        i += 2;
      } else if ((buffer[i] & 0xF8) == 0xF0) {
        // Four-byte character
        printf(",%d,%d,%d", (int)buffer[i + 1], (int)buffer[i + 2], (int)buffer[i + 3]);
        i += 3;
      }

      // Print a newline after each character
      printf("\n");
    }
  }

  // Clean up
  free(buffer);
  fclose(file);
}


// C89 compatible C

// Function to remove "#" and all trailing chars from a string.
// If the "#" is embedded in "" we keep all chars within the ""

#include <stdio.h>
#include <string.h>

void remove_trailing_chars (char *s)
{
    int len = strlen(s);
    int inQuote = 0;

    for (int i = len-1; i >= 0; i--)
    {
        if (s[i] == '#' && inQuote == 0)
            s[i] = '\0';
        else if (s[i] == '"')
            inQuote = !inQuote;
    }
}

// Function to remove all leading and trailing spaces and tabs from a string.
void strip_spaces(char *str)
{
    // Initialize two pointers left and right
    char *left = str;
    char *right = str + strlen(str) - 1;

    // Traverse string from both ends until a non-space character is found
    while (right > left && (*left == ' ' || *left == '\t'))
        left++;
    while (right > left && (*right == ' ' || *right == '\t'))
        right--;

    // Write all non-space characters from left to right
    while (left <= right)
    {
        *str++ = *left++;
    }

    // Terminate the string with a null character
    *str = '\0';
}

int main (void)
{
    char s1[] = "This is a test# of the function";
    char s2[] = "This is a \"#test\" of the function";

    remove_trailing_chars(s1);
    remove_trailing_chars(s2);

    printf("%s\n%s\n", s1, s2);

    return 0;
}


void trim(char *str)
{
    int len = strlen(str);

    if (len > 2)
    {
        for (int i = 0; i < len - 2; ++i)
            str[i] = str[i + 2];

        str[len - 2] = '\0';
    }
    else
    {
        str[0] = '\0';
    }
}